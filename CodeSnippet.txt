// change the following content
"sdboot=echo Copying Linux from SD to RAM...;" \
"mmcinfo;" \
"fatload mmc 0 0x3000000 ${kernel_image};" \
"fatload mmc 0 0x2A00000 ${devicetree_image};" \
"fatload mmc 0 0x2000000 ${ramdisk_image};" \
"bootm 0x3000000 0x2000000 0x2A00000\0" \

// to the following content
"sdboot=echo Copying Linux from SD to RAM...;" \
"mmcinfo;" \
"fatload mmc 0 0x3000000 ${kernel_image};" \
"fatload mmc 0 0x2A00000 ${devicetree_image};" \
"bootm 0x3000000 - 0x2A00000\0" \

// commands to compile u-boot
export CROSS_COMPILE=arm-xilinx-linux-gnueabi-
export ARCH=arm
make zynq_zed_config
make

export CROSS_COMPILE=arm-xilinx-linux-gnueabi-
make ARCH=arm xilinx_zynq_defconfig

obj-$(CONFIG_MXP) += mxp.o
obj-$(CONFIG_CM_ALLOCATOR) += cma.o

CONFIG_MXP=m
CONFIG_CM_ALLOCATOR=y

make ARCH=arm UIMAGE_LOADADDR=0x8000 uImage
make ARCH=arm modules

make ARCH=arm modules_install INSTALL_MOD_PATH=/path/to/rootfs(
ext4partition)/in/sdcard/

// Generating the dtb
./scripts/dtc/dtc -I dts -O dtb arch/arm/boot/dts/zynq-zed.dts 
 -o mxp.dtb
./scripts/dtc/dtc -I dtb -O dts mxp.dtb -o mxp_linux.dts

//change this content
bootargs = "console=ttyPS0,115200 root=/dev/ram rw earlyprintk";
//to this content
bootargs = "console=ttyPS0,115200 root=/dev/mmcblk0p2 rw earlyprintk 
rootfstype=ext4 rootwait devtmpfs.mount=0";

// hsi command opens up the TCL shell 
hsi
hsi% open_hw_design system.hdf
hsi% set_repo_path /path/to/Device tree repo/
hsi% create_sw_design mxp_device_tree -os device_tree -proc
ps7_cortexa9_0
hsi% generate_target -dir mxp_dts
hsi% quit

compatible = "vectorblox.com,vectorblox-mxp-1.0";

vectorblox_mxp@40000000{
reg = <0x40000000 0x100000 0xb0000000 0x10000>;

./scripts/dtc/dtc -I dts -O dtb mxp_linux.dts -o devicetree.dtb

 /* Preparing the BOOT.bin package.
    Make sure the contents are ordered as shown
 */  
the_ROM_image:
{
 [bootloader] <path to fsbl.elf>
 <path to bitstream file>
 <path to u-boot.elf>
}

bootgen -image bootimage.bif -o i boot.bin -w on

 ............
 ............
 mxp_init
 mxp_probe
 ............
 ............

 // configuration parameters for the MXP setup
vector_lanes = 16
core_freq = 100.0e6
scratchpad_size = 65536
dma data width in bytes = 8

 //MXP application for Image negation
 int main(int argc, char *argv[])
 {
 pgm_t opgm;
 pgm_t ipgm;
 int img_size = 0;
 unsigned char *v_sub = NULL;
 unsigned char max_val = 255;
 // MXP initialization
 VectorBlox_MXP_Initialize("mxp0","cma"); 
 //Reading input image
 readPGM(&ipgm,"input_lena.pgm");  
 img_size = (ipgm.width * ipgm.height);
  //Allocate buffer for output image
 opgm.width = ipgm.width; 
 opgm.height = ipgm.height;
 opgm.buf = (unsigned char*)vbx_shared_malloc(img_size * sizeof(unsigned char));
  //Allocate vector on scratchpad
 v_sub = (unsigned char *)vbx_sp_malloc(img_size * sizeof(unsigned char )); 
 //Transfer input bytes from memory to scratchpad
 vbx_dma_to_vector(v_sub, ipgm.buf, img_size);
 vbx_set_vl(img_size);
 //Scalar vector subtraction for taking negative of image
 vbx(SVBU, VSUB, v_sub, max_val, v_sub);
 //Writing result from scratchpad to memory
 vbx_dma_to_host(opgm.buf, v_sub, img_size);
 vbx_sync();
 //Writing output image
 writePGM(&opgm,"out_lena_negative.pgm");
 //Free allocated pointers
 vbx_sp_free();
 vbx_shared_free(ipgm.buf);
 vbx_shared_free(opgm.buf);
 }
 
